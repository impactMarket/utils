/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CommunityInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "_firstBlockTimestamp()": FunctionFragment;
    "addBeneficiary(address)": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "addTreasuryFunds(uint256)": FunctionFragment;
    "baseInterval()": FunctionFragment;
    "beneficiaries(address)": FunctionFragment;
    "beneficiaryJoinFromMigrated()": FunctionFragment;
    "beneficiaryListAt(uint256)": FunctionFragment;
    "beneficiaryListLength()": FunctionFragment;
    "cUSD()": FunctionFragment;
    "claim()": FunctionFragment;
    "claimAmount()": FunctionFragment;
    "claimCooldown(address)": FunctionFragment;
    "communityAdmin()": FunctionFragment;
    "decreaseStep()": FunctionFragment;
    "donate(address,uint256)": FunctionFragment;
    "getInitialMaxClaim()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "impactMarketAddress()": FunctionFragment;
    "incrementInterval()": FunctionFragment;
    "initialize(address[],uint256,uint256,uint256,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "lastInterval(address)": FunctionFragment;
    "lock()": FunctionFragment;
    "lockBeneficiary(address)": FunctionFragment;
    "locked()": FunctionFragment;
    "maxClaim()": FunctionFragment;
    "maxTranche()": FunctionFragment;
    "minTranche()": FunctionFragment;
    "owner()": FunctionFragment;
    "previousCommunity()": FunctionFragment;
    "privateFunds()": FunctionFragment;
    "removeBeneficiary(address)": FunctionFragment;
    "removeManager(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestFunds()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transfer(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryFunds()": FunctionFragment;
    "unlock()": FunctionFragment;
    "unlockBeneficiary(address)": FunctionFragment;
    "updateBeneficiaryParams(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "updateCommunityAdmin(address)": FunctionFragment;
    "updateCommunityParams(uint256,uint256)": FunctionFragment;
    "updatePreviousCommunity(address)": FunctionFragment;
    "validBeneficiaryCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_firstBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addTreasuryFunds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "baseInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaries",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryJoinFromMigrated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryListAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiaryListLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cUSD", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCooldown",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "communityAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseStep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitialMaxClaim",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "impactMarketAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string[],
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lastInterval",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "locked", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxClaim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxTranche",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minTranche",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "previousCommunity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "privateFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFunds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlockBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeneficiaryParams",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCommunityAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCommunityParams",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePreviousCommunity",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "validBeneficiaryCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_firstBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addTreasuryFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryJoinFromMigrated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryListAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiaryListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cUSD", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "communityAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitialMaxClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "impactMarketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxTranche", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minTranche", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "previousCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "privateFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeneficiaryParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCommunityAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCommunityParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePreviousCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validBeneficiaryCount",
    data: BytesLike
  ): Result;

  events: {
    "BeneficiaryAdded(address,address)": EventFragment;
    "BeneficiaryClaim(address,uint256)": EventFragment;
    "BeneficiaryJoined(address)": EventFragment;
    "BeneficiaryLocked(address,address)": EventFragment;
    "BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "BeneficiaryRemoved(address,address)": EventFragment;
    "BeneficiaryUnlocked(address,address)": EventFragment;
    "CommunityAdminUpdated(address,address)": EventFragment;
    "CommunityLocked(address)": EventFragment;
    "CommunityParamsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "CommunityUnlocked(address)": EventFragment;
    "Donate(address,uint256)": EventFragment;
    "FundsRequested(address)": EventFragment;
    "ManagerAdded(address,address)": EventFragment;
    "ManagerRemoved(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PreviousCommunityUpdated(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "TransferERC20(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BeneficiaryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryJoined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeneficiaryUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityAdminUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommunityUnlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Donate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PreviousCommunityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferERC20"): EventFragment;
}

export type BeneficiaryAddedEvent = TypedEvent<
  [string, string],
  { manager: string; beneficiary: string }
>;

export type BeneficiaryAddedEventFilter =
  TypedEventFilter<BeneficiaryAddedEvent>;

export type BeneficiaryClaimEvent = TypedEvent<
  [string, BigNumber],
  { beneficiary: string; amount: BigNumber }
>;

export type BeneficiaryClaimEventFilter =
  TypedEventFilter<BeneficiaryClaimEvent>;

export type BeneficiaryJoinedEvent = TypedEvent<
  [string],
  { beneficiary: string }
>;

export type BeneficiaryJoinedEventFilter =
  TypedEventFilter<BeneficiaryJoinedEvent>;

export type BeneficiaryLockedEvent = TypedEvent<
  [string, string],
  { manager: string; beneficiary: string }
>;

export type BeneficiaryLockedEventFilter =
  TypedEventFilter<BeneficiaryLockedEvent>;

export type BeneficiaryParamsUpdatedEvent = TypedEvent<
  [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    oldClaimAmount: BigNumber;
    oldMaxClaim: BigNumber;
    oldDecreaseStep: BigNumber;
    oldBaseInterval: BigNumber;
    oldIncrementInterval: BigNumber;
    newClaimAmount: BigNumber;
    newMaxClaim: BigNumber;
    newDecreaseStep: BigNumber;
    newBaseInterval: BigNumber;
    newIncrementInterval: BigNumber;
  }
>;

export type BeneficiaryParamsUpdatedEventFilter =
  TypedEventFilter<BeneficiaryParamsUpdatedEvent>;

export type BeneficiaryRemovedEvent = TypedEvent<
  [string, string],
  { manager: string; beneficiary: string }
>;

export type BeneficiaryRemovedEventFilter =
  TypedEventFilter<BeneficiaryRemovedEvent>;

export type BeneficiaryUnlockedEvent = TypedEvent<
  [string, string],
  { manager: string; beneficiary: string }
>;

export type BeneficiaryUnlockedEventFilter =
  TypedEventFilter<BeneficiaryUnlockedEvent>;

export type CommunityAdminUpdatedEvent = TypedEvent<
  [string, string],
  { oldCommunityAdmin: string; newCommunityAdmin: string }
>;

export type CommunityAdminUpdatedEventFilter =
  TypedEventFilter<CommunityAdminUpdatedEvent>;

export type CommunityLockedEvent = TypedEvent<[string], { manager: string }>;

export type CommunityLockedEventFilter = TypedEventFilter<CommunityLockedEvent>;

export type CommunityParamsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  {
    oldMinTranche: BigNumber;
    oldMaxTranche: BigNumber;
    newMinTranche: BigNumber;
    newMaxTranche: BigNumber;
  }
>;

export type CommunityParamsUpdatedEventFilter =
  TypedEventFilter<CommunityParamsUpdatedEvent>;

export type CommunityUnlockedEvent = TypedEvent<[string], { manager: string }>;

export type CommunityUnlockedEventFilter =
  TypedEventFilter<CommunityUnlockedEvent>;

export type DonateEvent = TypedEvent<
  [string, BigNumber],
  { donor: string; amount: BigNumber }
>;

export type DonateEventFilter = TypedEventFilter<DonateEvent>;

export type FundsRequestedEvent = TypedEvent<[string], { manager: string }>;

export type FundsRequestedEventFilter = TypedEventFilter<FundsRequestedEvent>;

export type ManagerAddedEvent = TypedEvent<
  [string, string],
  { manager: string; account: string }
>;

export type ManagerAddedEventFilter = TypedEventFilter<ManagerAddedEvent>;

export type ManagerRemovedEvent = TypedEvent<
  [string, string],
  { manager: string; account: string }
>;

export type ManagerRemovedEventFilter = TypedEventFilter<ManagerRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PreviousCommunityUpdatedEvent = TypedEvent<
  [string, string],
  { oldPreviousCommunity: string; newPreviousCommunity: string }
>;

export type PreviousCommunityUpdatedEventFilter =
  TypedEventFilter<PreviousCommunityUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TransferERC20Event = TypedEvent<
  [string, string, BigNumber],
  { token: string; to: string; amount: BigNumber }
>;

export type TransferERC20EventFilter = TypedEventFilter<TransferERC20Event>;

export interface Community extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommunityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    _firstBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    addBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManager(
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addTreasuryFunds(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    baseInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    beneficiaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        state: number;
        claims: BigNumber;
        claimedAmount: BigNumber;
        lastClaim: BigNumber;
      }
    >;

    beneficiaryJoinFromMigrated(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    beneficiaryListAt(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    beneficiaryListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    cUSD(overrides?: CallOverrides): Promise<[string]>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimCooldown(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    communityAdmin(overrides?: CallOverrides): Promise<[string]>;

    decreaseStep(overrides?: CallOverrides): Promise<[BigNumber]>;

    donate(
      sender_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitialMaxClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    impactMarketAddress(overrides?: CallOverrides): Promise<[string]>;

    incrementInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      managers_: string[],
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      previousCommunity_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastInterval(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    locked(overrides?: CallOverrides): Promise<[boolean]>;

    maxClaim(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTranche(overrides?: CallOverrides): Promise<[BigNumber]>;

    minTranche(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    previousCommunity(overrides?: CallOverrides): Promise<[string]>;

    privateFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeManager(
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transfer(
      token_: string,
      to_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasuryFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateBeneficiaryParams(
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCommunityAdmin(
      newCommunityAdmin_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCommunityParams(
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePreviousCommunity(
      newPreviousCommunity_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validBeneficiaryCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  _firstBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  addBeneficiary(
    beneficiaryAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManager(
    account_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addTreasuryFunds(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  baseInterval(overrides?: CallOverrides): Promise<BigNumber>;

  beneficiaries(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber, BigNumber] & {
      state: number;
      claims: BigNumber;
      claimedAmount: BigNumber;
      lastClaim: BigNumber;
    }
  >;

  beneficiaryJoinFromMigrated(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  beneficiaryListAt(
    index_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  beneficiaryListLength(overrides?: CallOverrides): Promise<BigNumber>;

  cUSD(overrides?: CallOverrides): Promise<string>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

  claimCooldown(
    beneficiaryAddress_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  communityAdmin(overrides?: CallOverrides): Promise<string>;

  decreaseStep(overrides?: CallOverrides): Promise<BigNumber>;

  donate(
    sender_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitialMaxClaim(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getVersion(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  impactMarketAddress(overrides?: CallOverrides): Promise<string>;

  incrementInterval(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    managers_: string[],
    claimAmount_: BigNumberish,
    maxClaim_: BigNumberish,
    decreaseStep_: BigNumberish,
    baseInterval_: BigNumberish,
    incrementInterval_: BigNumberish,
    minTranche_: BigNumberish,
    maxTranche_: BigNumberish,
    previousCommunity_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastInterval(
    beneficiaryAddress_: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockBeneficiary(
    beneficiaryAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  locked(overrides?: CallOverrides): Promise<boolean>;

  maxClaim(overrides?: CallOverrides): Promise<BigNumber>;

  maxTranche(overrides?: CallOverrides): Promise<BigNumber>;

  minTranche(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  previousCommunity(overrides?: CallOverrides): Promise<string>;

  privateFunds(overrides?: CallOverrides): Promise<BigNumber>;

  removeBeneficiary(
    beneficiaryAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeManager(
    account_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    token_: string,
    to_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasuryFunds(overrides?: CallOverrides): Promise<BigNumber>;

  unlock(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockBeneficiary(
    beneficiaryAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateBeneficiaryParams(
    claimAmount_: BigNumberish,
    maxClaim_: BigNumberish,
    decreaseStep_: BigNumberish,
    baseInterval_: BigNumberish,
    incrementInterval_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCommunityAdmin(
    newCommunityAdmin_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCommunityParams(
    minTranche_: BigNumberish,
    maxTranche_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePreviousCommunity(
    newPreviousCommunity_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validBeneficiaryCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    _firstBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    addBeneficiary(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addManager(account_: string, overrides?: CallOverrides): Promise<void>;

    addTreasuryFunds(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    baseInterval(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber, BigNumber] & {
        state: number;
        claims: BigNumber;
        claimedAmount: BigNumber;
        lastClaim: BigNumber;
      }
    >;

    beneficiaryJoinFromMigrated(overrides?: CallOverrides): Promise<void>;

    beneficiaryListAt(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    beneficiaryListLength(overrides?: CallOverrides): Promise<BigNumber>;

    cUSD(overrides?: CallOverrides): Promise<string>;

    claim(overrides?: CallOverrides): Promise<void>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    claimCooldown(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityAdmin(overrides?: CallOverrides): Promise<string>;

    decreaseStep(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      sender_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInitialMaxClaim(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    impactMarketAddress(overrides?: CallOverrides): Promise<string>;

    incrementInterval(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      managers_: string[],
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      previousCommunity_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastInterval(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<void>;

    lockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    locked(overrides?: CallOverrides): Promise<boolean>;

    maxClaim(overrides?: CallOverrides): Promise<BigNumber>;

    maxTranche(overrides?: CallOverrides): Promise<BigNumber>;

    minTranche(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    previousCommunity(overrides?: CallOverrides): Promise<string>;

    privateFunds(overrides?: CallOverrides): Promise<BigNumber>;

    removeBeneficiary(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeManager(account_: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestFunds(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      token_: string,
      to_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryFunds(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(overrides?: CallOverrides): Promise<void>;

    unlockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBeneficiaryParams(
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCommunityAdmin(
      newCommunityAdmin_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCommunityParams(
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePreviousCommunity(
      newPreviousCommunity_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validBeneficiaryCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BeneficiaryAdded(address,address)"(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryAddedEventFilter;
    BeneficiaryAdded(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryAddedEventFilter;

    "BeneficiaryClaim(address,uint256)"(
      beneficiary?: string | null,
      amount?: null
    ): BeneficiaryClaimEventFilter;
    BeneficiaryClaim(
      beneficiary?: string | null,
      amount?: null
    ): BeneficiaryClaimEventFilter;

    "BeneficiaryJoined(address)"(
      beneficiary?: string | null
    ): BeneficiaryJoinedEventFilter;
    BeneficiaryJoined(
      beneficiary?: string | null
    ): BeneficiaryJoinedEventFilter;

    "BeneficiaryLocked(address,address)"(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryLockedEventFilter;
    BeneficiaryLocked(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryLockedEventFilter;

    "BeneficiaryParamsUpdated(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      oldClaimAmount?: null,
      oldMaxClaim?: null,
      oldDecreaseStep?: null,
      oldBaseInterval?: null,
      oldIncrementInterval?: null,
      newClaimAmount?: null,
      newMaxClaim?: null,
      newDecreaseStep?: null,
      newBaseInterval?: null,
      newIncrementInterval?: null
    ): BeneficiaryParamsUpdatedEventFilter;
    BeneficiaryParamsUpdated(
      oldClaimAmount?: null,
      oldMaxClaim?: null,
      oldDecreaseStep?: null,
      oldBaseInterval?: null,
      oldIncrementInterval?: null,
      newClaimAmount?: null,
      newMaxClaim?: null,
      newDecreaseStep?: null,
      newBaseInterval?: null,
      newIncrementInterval?: null
    ): BeneficiaryParamsUpdatedEventFilter;

    "BeneficiaryRemoved(address,address)"(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryRemovedEventFilter;
    BeneficiaryRemoved(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryRemovedEventFilter;

    "BeneficiaryUnlocked(address,address)"(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryUnlockedEventFilter;
    BeneficiaryUnlocked(
      manager?: string | null,
      beneficiary?: string | null
    ): BeneficiaryUnlockedEventFilter;

    "CommunityAdminUpdated(address,address)"(
      oldCommunityAdmin?: string | null,
      newCommunityAdmin?: string | null
    ): CommunityAdminUpdatedEventFilter;
    CommunityAdminUpdated(
      oldCommunityAdmin?: string | null,
      newCommunityAdmin?: string | null
    ): CommunityAdminUpdatedEventFilter;

    "CommunityLocked(address)"(
      manager?: string | null
    ): CommunityLockedEventFilter;
    CommunityLocked(manager?: string | null): CommunityLockedEventFilter;

    "CommunityParamsUpdated(uint256,uint256,uint256,uint256)"(
      oldMinTranche?: null,
      oldMaxTranche?: null,
      newMinTranche?: null,
      newMaxTranche?: null
    ): CommunityParamsUpdatedEventFilter;
    CommunityParamsUpdated(
      oldMinTranche?: null,
      oldMaxTranche?: null,
      newMinTranche?: null,
      newMaxTranche?: null
    ): CommunityParamsUpdatedEventFilter;

    "CommunityUnlocked(address)"(
      manager?: string | null
    ): CommunityUnlockedEventFilter;
    CommunityUnlocked(manager?: string | null): CommunityUnlockedEventFilter;

    "Donate(address,uint256)"(
      donor?: string | null,
      amount?: null
    ): DonateEventFilter;
    Donate(donor?: string | null, amount?: null): DonateEventFilter;

    "FundsRequested(address)"(
      manager?: string | null
    ): FundsRequestedEventFilter;
    FundsRequested(manager?: string | null): FundsRequestedEventFilter;

    "ManagerAdded(address,address)"(
      manager?: string | null,
      account?: string | null
    ): ManagerAddedEventFilter;
    ManagerAdded(
      manager?: string | null,
      account?: string | null
    ): ManagerAddedEventFilter;

    "ManagerRemoved(address,address)"(
      manager?: string | null,
      account?: string | null
    ): ManagerRemovedEventFilter;
    ManagerRemoved(
      manager?: string | null,
      account?: string | null
    ): ManagerRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PreviousCommunityUpdated(address,address)"(
      oldPreviousCommunity?: string | null,
      newPreviousCommunity?: string | null
    ): PreviousCommunityUpdatedEventFilter;
    PreviousCommunityUpdated(
      oldPreviousCommunity?: string | null,
      newPreviousCommunity?: string | null
    ): PreviousCommunityUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "TransferERC20(address,address,uint256)"(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TransferERC20EventFilter;
    TransferERC20(
      token?: string | null,
      to?: string | null,
      amount?: null
    ): TransferERC20EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    _firstBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    addBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManager(
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addTreasuryFunds(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    baseInterval(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiaries(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    beneficiaryJoinFromMigrated(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    beneficiaryListAt(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    beneficiaryListLength(overrides?: CallOverrides): Promise<BigNumber>;

    cUSD(overrides?: CallOverrides): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAmount(overrides?: CallOverrides): Promise<BigNumber>;

    claimCooldown(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    communityAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseStep(overrides?: CallOverrides): Promise<BigNumber>;

    donate(
      sender_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitialMaxClaim(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impactMarketAddress(overrides?: CallOverrides): Promise<BigNumber>;

    incrementInterval(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      managers_: string[],
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      previousCommunity_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastInterval(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    locked(overrides?: CallOverrides): Promise<BigNumber>;

    maxClaim(overrides?: CallOverrides): Promise<BigNumber>;

    maxTranche(overrides?: CallOverrides): Promise<BigNumber>;

    minTranche(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    previousCommunity(overrides?: CallOverrides): Promise<BigNumber>;

    privateFunds(overrides?: CallOverrides): Promise<BigNumber>;

    removeBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeManager(
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      token_: string,
      to_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasuryFunds(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateBeneficiaryParams(
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCommunityAdmin(
      newCommunityAdmin_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCommunityParams(
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePreviousCommunity(
      newPreviousCommunity_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validBeneficiaryCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _firstBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManager(
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addTreasuryFunds(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    baseInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiaries(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryJoinFromMigrated(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    beneficiaryListAt(
      index_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    beneficiaryListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimCooldown(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    communityAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseStep(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    donate(
      sender_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitialMaxClaim(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    impactMarketAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrementInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      managers_: string[],
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      previousCommunity_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastInterval(
      beneficiaryAddress_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    locked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxClaim(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minTranche(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    previousCommunity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    privateFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeManager(
      account_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      token_: string,
      to_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasuryFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockBeneficiary(
      beneficiaryAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateBeneficiaryParams(
      claimAmount_: BigNumberish,
      maxClaim_: BigNumberish,
      decreaseStep_: BigNumberish,
      baseInterval_: BigNumberish,
      incrementInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCommunityAdmin(
      newCommunityAdmin_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCommunityParams(
      minTranche_: BigNumberish,
      maxTranche_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePreviousCommunity(
      newPreviousCommunity_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validBeneficiaryCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
